services:
  read:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      expense-network:
        aliases:
          - loki

  write:
    image: grafana/loki:3.0.0
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./observability/alloy/alloy-local-config.yml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio:latest
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000"
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


  backend:
    image: grafana/loki:3.0.0
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


  config-server:
    image: redartis/et-config-server:v0.0.1
    container_name: config-server
    build:
      context: ..
      dockerfile: config-server/Dockerfile
    restart: unless-stopped
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "8888:8888"
    environment:
      CONFIG_SERVER_GIT_REPOSITORY_URI: ${CONFIG_SERVER_GIT_REPOSITORY_URI}
    extends:
      file: common-config.yml
      service: microservice-base-config

  eureka-service:
    image: redartis/et-eureka-service:v0.0.1
    container_name: eureka-service
    build:
      context: ..
      dockerfile: discovery-service/Dockerfile
    restart: unless-stopped
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "8761:8761"
    extends:
      file: common-config.yml
      service: microservice-config-server-config
    environment:
      SPRING_APPLICATION_NAME: "eureka-service"

  authentication-service:
    image: redartis/et-authentication-service:v0.0.1
    container_name: auth-service
    build:
      context: ..
      dockerfile: authentication-service/Dockerfile
    ports:
      - "8400:8400"
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:8400/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "authentication-service"

  expense-tracker-db:
    container_name: expense-tracker-db
    image: postgres
    restart: unless-stopped
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: ${EXPENSE_DB}
      POSTGRES_USER: ${EXPENSE_DB_USER}
      POSTGRES_PASSWORD: ${EXPENSE_DB_PASSWORD}
    extends:
      file: common-config.yml
      service: network-deploy-service

  expense-service:
    image: redartis/et-expense-service:v0.0.1
    container_name: expense-service
    build:
      context: ..
      dockerfile: expense-service/Dockerfile
    ports:
      - "8100:8100"
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:8100/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      expense-tracker-db:
        condition: service_started
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "expense-service"
      SPRING_DATASOURCE_URL: jdbc:postgresql://expense-tracker-db:5432/${EXPENSE_DB}

  telegram-bot-mongodb:
    container_name: telegram-bot-mongodb
    image: mongo
    restart: unless-stopped
    ports:
      - "7017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    extends:
      file: common-config.yml
      service: network-deploy-service

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - "7018:8081"
    depends_on:
      - telegram-bot-mongodb
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGODB_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGODB_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@telegram-bot-mongodb:27017/
    extends:
      file: common-config.yml
      service: network-deploy-service

  telegram-bot-service:
    image: redartis/et-telegram-bot-service:v0.0.1
    container_name: telegram-bot-service
    build:
      context: ..
      dockerfile: telegram-bot-service/Dockerfile
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:8200/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      telegram-bot-mongodb:
        condition: service_started
    ports:
      - "8200:8200"
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "telegram-bot-service"
      SPRING_DATA_MONGODB_URI: "mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@telegram-bot-mongodb:27017/${MONGODB_DATABASE}?authSource=admin"

  recognizer-service:
    image: redartis/et-recognizer-service:v0.0.1
    container_name: recognizer-service
    build:
      context: ..
      dockerfile: recognizer-service/Dockerfile
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent localhost:8300/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    ports:
      - "8300:8300"
    extends:
      file: common-config.yml
      service: microservice-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "recognizer-service"

  gateway-server:
    image: redartis/et-api-gateway-server:v0.0.1
    container_name: api-gateway-server
    build:
      context: ..
      dockerfile: api-gateway/Dockerfile
    restart: on-failure
    ports:
      - "8072:8072"
    depends_on:
      authentication-service:
        condition: service_healthy
      expense-service:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "api-gateway"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  #frontend:
  #  image: redartis/et-frontend:v0.0.1
  #  container_name: vue-frontend
  #  build:
  #    context: .
  #    dockerfile: frontend/Dockerfile
  #  restart: on-failure
  #  ports:
  #    - "3000:3000"
  #  depends_on:
  #    gateway-server:
  #      condition: service_completed_successfully
  #  extends:
  #    file: common-config.yml
  #    service: network-deploy-service
  #  environment:
  #    VUE_APP_API_URL: http://gateway-server:8072

  zipkin-server:
    image: openzipkin/zipkin
    restart: always
    ports:
      - "9411:9411"
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  expense-network:
    driver: "bridge"
